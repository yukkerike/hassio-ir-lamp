#pragma once

#include "esphome/core/component.h"
#include "esphome/components/light/light_output.h"
#include "esphome/components/remote_transmitter/remote_transmitter.h"
#include "esphome/components/remote_base/remote_base.h"
#include "esphome/components/remote_base/pronto_protocol.h"
#include "esphome/core/log.h"
#include <sstream>
#include <map>
#include <vector>

namespace esphome
{
    namespace citilux_ir
    {

        // IR коды для основных команд
        static const std::map<std::string, std::string> IR_CODES = {
            {"ON", "0000 006D 0022 0000 0159 00AD 0016 0015 0016 0015 0016 0015 0016 0016 0015 0016 0015 0042 0015 0016 0015 0042 0015 0040 0016 0041 0016 0040 0016 0041 0015 0042 0015 0016 0016 0040 0016 0015 0016 0041 0016 0041 0016 0040 0015 0042 0015 0042 0015 0016 0015 0042 0015 0016 0015 0017 0016 0015 0016 0016 0015 0016 0015 0016 0015 0042 0015 0017 0015 0042 0015 0181"},   // включение
            {"OFF", "0000 006D 0022 0000 0158 00AD 0015 0017 0015 0016 0015 0016 0016 0015 0016 0015 0016 0040 0016 0015 0016 0040 0016 0041 0015 0042 0015 0042 0015 0042 0015 0040 0016 0016 0015 0041 0016 0016 0015 0016 0015 0040 0016 0016 0015 0041 0016 0041 0016 0015 0016 0015 0016 0015 0016 0041 0016 0015 0016 0041 0016 0015 0016 0015 0016 0041 0016 0041 0016 0041 0015 0181"},  // выключение
            {"bri+", "0000 006D 0022 0000 0159 00AB 0017 0014 0017 0015 0016 0015 0016 0015 0016 0016 0015 0041 0016 0016 0015 0041 0016 0040 0016 0041 0016 0041 0015 0041 0015 0042 0015 0016 0015 0042 0015 0016 0015 0042 0015 0017 0015 0016 0015 0042 0015 0042 0015 0016 0015 0042 0015 0016 0015 0016 0015 0042 0015 0042 0015 0016 0015 0016 0015 0042 0015 0016 0015 0042 0015 0181"}, // повысить яркость
            {"bri-", "0000 006D 0022 0000 0159 00AD 0015 0017 0015 0016 0015 0016 0015 0016 0015 0017 0015 0042 0015 0016 0015 0042 0015 0042 0015 0042 0015 0042 0015 0042 0015 0041 0016 0016 0015 0041 0016 0015 0016 0041 0016 0015 0016 0016 0015 0016 0015 0041 0016 0016 0015 0041 0016 0016 0015 0016 0015 0042 0015 0041 0016 0040 0016 0015 0016 0041 0016 0015 0016 0041 0016 0181"}, // понизить яркость (либо включить с min яркостью, если люстра OFF)
            {"cold", "0000 006D 0022 0000 0159 00AD 0015 0016 0015 0016 0016 0015 0016 0015 0016 0015 0016 0040 0016 0015 0016 0040 0016 0041 0016 0040 0016 0040 0016 0041 0015 0042 0015 0016 0015 0042 0015 0016 0015 0017 0016 0015 0016 0040 0016 0015 0016 0040 0016 0015 0016 0015 0016 0016 0015 0041 0016 0040 0016 0016 0015 0040 0016 0016 0015 0041 0016 0040 0016 0040 0016 0181"}, // холоднее (либо включить max cold яркость, если люстра OFF)
            {"warm", "0000 006D 0022 0000 0159 00AD 0016 0015 0016 0015 0016 0015 0016 0015 0016 0017 0015 0040 0016 0015 0017 0040 0016 0041 0016 0041 0015 0042 0015 0042 0015 0042 0015 0016 0015 0042 0015 0016 0015 0016 0015 0042 0015 0042 0015 0017 0015 0042 0015 0016 0015 0041 0015 0016 0016 0040 0016 0016 0015 0016 0015 0040 0016 0016 0015 0041 0018 0013 0016 0041 0016 0181"}, // теплее (либо включить max warm яркость, если люстра OFF)
            {"max", "0000 006D 0022 0000 0159 00AD 0016 0015 0016 0015 0016 0015 0016 0015 0016 0016 0016 0041 0015 0016 0015 0042 0015 0042 0015 0041 0016 0040 0016 0040 0016 0041 0016 0015 0017 0040 0016 0015 0016 0040 0016 0015 0016 0040 0016 0015 0016 0040 0016 0015 0016 0041 0016 0015 0016 0015 0017 0040 0016 0015 0016 0041 0016 0015 0016 0041 0016 0015 0016 0041 0016 0181"},  // небезопасная max яркость
            {"M1", "0000 006D 0022 0000 0159 00AD 0015 0016 0015 0016 0015 0016 0015 0016 0015 0016 0016 0041 0015 0016 0016 0041 0015 0042 0015 0042 0015 0042 0015 0042 0015 0040 0016 0016 0015 0041 0016 0017 0015 0041 0016 0041 0016 0041 0015 0042 0015 0016 0015 0042 0015 0042 0015 0042 0015 0016 0015 0016 0015 0017 0015 0016 0016 0041 0015 0016 0016 0015 0016 0015 0016 0181"},   // min яркость
            {"M2", "0000 006D 0022 0000 0159 00AC 0015 0015 0016 0016 0015 0016 0015 0016 0015 0017 0015 0042 0015 0016 0015 0041 0015 0042 0015 0042 0015 0042 0015 0041 0016 0041 0016 0015 0016 0041 0016 0015 0016 0015 0016 0041 0016 0016 0015 0015 0016 0040 0016 0015 0016 0041 0016 0015 0016 0041 0015 0016 0016 0040 0015 0041 0015 0016 0015 0042 0015 0016 0015 0042 0015 0181"},   // средняя яркость
            {"M3", "0000 006D 0022 0000 0159 00AD 0015 0016 0015 0016 0015 0016 0015 0016 0016 0015 0016 0041 0015 0016 0016 0041 0015 0042 0015 0042 0015 0042 0015 0041 0015 0041 0016 0015 0016 0041 0016 0015 0016 0040 0016 0015 0016 0041 0016 0041 0015 0042 0015 0017 0015 0041 0015 0016 0015 0017 0015 0042 0015 0016 0015 0016 0015 0016 0016 0041 0015 0016 0015 0042 0015 0181"},   // чуть ниже, чем max, чтобы не терять управление люстрой
            {"M4", "0000 006D 0022 0000 0159 00AC 0015 0016 0015 0016 0015 0016 0015 0016 0015 0017 0015 0042 0015 0016 0015 0042 0015 0042 0015 0041 0015 0042 0015 0041 0016 0041 0016 0015 0016 0041 0016 0015 0016 0015 0016 0016 0015 0016 0015 0016 0015 0016 0015 0016 0015 0042 0015 0016 0015 0042 0015 0042 0015 0041 0015 0042 0015 0042 0015 0042 0015 0016 0015 0042 0015 0181"},   // прикольная ячейка с желтоватым ночником, который надо хранить, но не использовать
            {"RGB", "0000 006D 0022 0000 0158 00AE 0015 0016 0015 0016 0015 0017 0015 0016 0015 0016 0015 0042 0015 0016 0015 0042 0015 0041 0015 0042 0015 0042 0015 0041 0016 0041 0016 0016 0016 0041 0016 0015 0016 0040 0016 0041 0015 0016 0016 0015 0016 0041 0016 0015 0016 0015 0016 0015 0016 0016 0015 0017 0015 0042 0015 0041 0016 0015 0016 0041 0016 0041 0016 0041 0015 0181 "}  // переключение RGB цветов по кругу
        };

        // Стандартная повторяющаяся последовательность для всех кодов
        static const std::string STANDARD_REPEAT_SEQUENCE = "0000 006D 0002 0000 0158 0057 0015 0181";

        class CitiluxIROutput : public Component, public light::LightOutput
        {
        public:
            void setup() override;
            light::LightTraits get_traits() override;
            void write_state(light::LightState *state) override;
            void dump_config() override;

            void set_transmitter(remote_transmitter::RemoteTransmitterComponent *transmitter) { this->transmitter_ = transmitter; }

        protected:
            void set_brightness(int brightness);
            void set_color_temp(int color_temp);
            void set_hs_color(unsigned char hue, unsigned char sat);
            void send_ir(std::string code, int repeat_times = 1);

            unsigned char f2u(float f) { return (unsigned char)(f * 255.0f); }
            void RGBtoHSV(float &fR, float &fG, float &fB, float &fH, float &fS);
            int convert_to_impulses(unsigned char hue, unsigned char sat);

            bool on_{false};
            unsigned char colorTemp_{0}, brightness_{0};
            float hue_{0}, sat_{0};
            remote_transmitter::RemoteTransmitterComponent *transmitter_{nullptr};
        };
    }
}